generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                            String                       @id @default(uuid())
  username                      String                       @unique
  email                         String?                      @unique
  password                      String
  firstName                     String?
  lastName                      String?
  role                          Role                         @default(BARISTA)
  status                        UserStatus                   @default(ACTIVE)
  createdAt                     DateTime                     @default(now())
  updatedAt                     DateTime                     @updatedAt
  lastLogin                     DateTime?
  createdCoffees                GreenCoffee[]
  inventoryLogs                 GreenCoffeeInventoryLog[]
  loggedAlerts                  InventoryAlertLog[]          @relation("AlertLogger")
  createdInventoryNotifications InventoryEmailNotification[] @relation("InventoryEmailNotificationCreator")
  messagesSent                  Message[]                    @relation("MessageSender")
  messagesRead                  MessageRead[]                @relation("MessageReader")
  createdEmailNotifications     OrderEmailNotification[]     @relation("OrderEmailNotificationCreator")
  createdPermissions            Permission[]                 @relation("PermissionCreator")
  permissions                   Permission[]
  pushNotificationLogs          PushNotificationLog[]        @relation("UserNotificationLogs")
  pushSubscriptions             PushSubscription[]           @relation("UserPushSubscriptions")
  retailOrders                  RetailOrder[]                @relation("OrderedBy")
  sessions                      Session[]
  createdShops                  Shop[]
  activities                    UserActivity[]
  shops                         UserShop[]
  teams                         UserTeam[]
  receivedAlertNotifications    InventoryAlertLog[]          @relation("AlertNotifications")
  createdOrderTemplates         OrderTemplate[]              @relation("OrderTemplateCreator")
}

model Shop {
  id                          String                       @id @default(uuid())
  name                        String                       @unique
  address                     String?
  city                        String?
  state                       String?
  zipCode                     String?
  country                     String?
  phoneNumber                 String?
  email                       String?
  minCoffeeQuantityLarge      Int                          @default(0)
  minCoffeeQuantitySmall      Int                          @default(0)
  minCoffeeQuantityEspresso   Int                          @default(0)
  minCoffeeQuantityFilter     Int                          @default(0)
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt
  createdById                 String
  inventoryAlertLogs          InventoryAlertLog[]
  inventoryEmailNotifications InventoryEmailNotification[]
  emailNotifications          OrderEmailNotification[]
  retailInventory             RetailInventory[]
  retailOrders                RetailOrder[]
  orderTemplates              OrderTemplate[]
  createdBy                   User                         @relation(fields: [createdById], references: [id])
  users                       UserShop[]
}

model UserShop {
  userId    String
  shopId    String
  role      Role     @default(BARISTA)
  createdAt DateTime @default(now())
  shop      Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, shopId])
}

model Team {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  users       UserTeam[]
}

model UserTeam {
  userId    String
  teamId    String
  role      TeamRole @default(MEMBER)
  createdAt DateTime @default(now())
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, teamId])
}

model Permission {
  id          String   @id @default(uuid())
  name        String
  resource    String
  action      String
  userId      String?
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation("PermissionCreator", fields: [createdById], references: [id])
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, resource, action])
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  ipAddress String?
  userAgent String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserActivity {
  id         String   @id @default(uuid())
  userId     String
  action     String
  resource   String
  resourceId String?
  details    String?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
}

model GreenCoffee {
  id              String                    @id @default(uuid())
  name            String
  quantity        Float                     @default(0)
  labelQuantity   Int                       @default(0)
  grade           CoffeeGrade
  country         String?
  producer        String?
  process         String?
  notes           String?
  isEspresso      Boolean                   @default(false)
  isFilter        Boolean                   @default(false)
  isSignature     Boolean                   @default(false)
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  createdById     String
  price           Float?
  createdBy       User                      @relation(fields: [createdById], references: [id])
  inventoryLogs   GreenCoffeeInventoryLog[]
  retailInventory RetailInventory[]
  retailOrders    RetailOrderItem[]
  templateItems   OrderTemplateItem[]

  @@unique([name, country, producer])
}

model GreenCoffeeInventoryLog {
  id           String      @id @default(uuid())
  coffeeId     String
  userId       String
  changeAmount Float
  quantity     Float
  notes        String?
  createdAt    DateTime    @default(now())
  coffee       GreenCoffee @relation(fields: [coffeeId], references: [id], onDelete: Cascade)
  user         User        @relation(fields: [userId], references: [id])
}

model RetailOrder {
  id          String            @id @default(uuid())
  shopId      String
  orderedById String
  status      OrderStatus       @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  comment     String?           @db.VarChar(200)
  orderedBy   User              @relation("OrderedBy", fields: [orderedById], references: [id])
  shop        Shop              @relation(fields: [shopId], references: [id])
  items       RetailOrderItem[]

  @@index([shopId])
  @@index([orderedById])
  @@index([status])
  @@index([createdAt])
}

model RetailOrderItem {
  id                String      @id @default(uuid())
  orderId           String
  coffeeId          String
  smallBags         Int         @default(0)
  smallBagsEspresso Int         @default(0)
  smallBagsFilter   Int         @default(0)
  largeBags         Int         @default(0)
  totalQuantity     Float
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  coffee            GreenCoffee @relation(fields: [coffeeId], references: [id])
  order             RetailOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([coffeeId])
}

model OrderTemplate {
  id          String                @id @default(uuid())
  name        String
  description String?
  shopId      String?
  createdById String
  isPublic    Boolean               @default(false)
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  createdBy   User                  @relation("OrderTemplateCreator", fields: [createdById], references: [id])
  shop        Shop?                 @relation(fields: [shopId], references: [id])
  items       OrderTemplateItem[]

  @@unique([createdById, name])
  @@index([createdById])
  @@index([shopId])
  @@index([isPublic])
}

model OrderTemplateItem {
  id                String        @id @default(uuid())
  templateId        String
  coffeeId          String
  smallBags         Int           @default(0)
  smallBagsEspresso Int           @default(0)
  smallBagsFilter   Int           @default(0)
  largeBags         Int           @default(0)
  totalQuantity     Float
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  coffee            GreenCoffee   @relation(fields: [coffeeId], references: [id])
  template          OrderTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
  @@index([coffeeId])
}

model RetailInventory {
  id                String      @id @default(uuid())
  shopId            String
  coffeeId          String
  smallBags         Int         @default(0)
  largeBags         Int         @default(0)
  totalQuantity     Float
  lastOrderDate     DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  smallBagsEspresso Int         @default(0)
  smallBagsFilter   Int         @default(0)
  coffee            GreenCoffee @relation(fields: [coffeeId], references: [id])
  shop              Shop        @relation(fields: [shopId], references: [id])

  @@unique([shopId, coffeeId])
  @@index([shopId])
  @@index([coffeeId])
}

model InventoryAlertLog {
  id                  String   @id @default(uuid())
  shopId              String
  alertType           String
  totalSmallBags      Int
  totalLargeBags      Int
  minSmallBags        Int
  minLargeBags        Int
  smallBagsPercentage Float
  largeBagsPercentage Float
  createdAt           DateTime @default(now())
  loggedById          String
  emailsSent          Boolean  @default(false)
  loggedBy            User     @relation("AlertLogger", fields: [loggedById], references: [id])
  shop                Shop     @relation(fields: [shopId], references: [id])
  notifiedUsers       User[]   @relation("AlertNotifications")
}

model Message {
  id        String        @id @default(uuid())
  content   String
  senderId  String
  createdAt DateTime      @default(now())
  sender    User          @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  reads     MessageRead[]
}

model MessageRead {
  id        String   @id @default(uuid())
  messageId String
  userId    String
  readAt    DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation("MessageReader", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
}

model SystemSettings {
  id    String @id @default(uuid())
  key   String @unique
  value String
}

model OrderEmailNotification {
  id          String      @id @default(uuid())
  shopId      String
  orderStatus OrderStatus
  emails      String[]
  isEnabled   Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdById String
  createdBy   User        @relation("OrderEmailNotificationCreator", fields: [createdById], references: [id])
  shop        Shop        @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, orderStatus])
  @@index([shopId])
  @@index([orderStatus])
}

model InventoryEmailNotification {
  id          String   @id @default(uuid())
  shopId      String?
  emails      String[]
  isEnabled   Boolean  @default(true)
  alertType   String   @default("ALL")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation("InventoryEmailNotificationCreator", fields: [createdById], references: [id])
  shop        Shop?    @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([shopId, alertType])
  @@index([shopId])
  @@index([alertType])
}

model PushSubscription {
  id        String   @id @default(uuid())
  userId    String
  endpoint  String   @unique
  p256dh    String
  auth      String
  userAgent String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastUsed  DateTime @default(now())
  limited   Boolean  @default(false)
  mobile    Boolean  @default(false)
  user      User     @relation("UserPushSubscriptions", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isActive])
  @@index([endpoint])
  @@index([mobile])
}

model PushNotificationLog {
  id               String    @id @default(uuid())
  userId           String
  title            String
  body             String
  data             Json?
  notificationType String
  success          Boolean   @default(false)
  error            String?
  sentAt           DateTime  @default(now())
  clickedAt        DateTime?
  user             User      @relation("UserNotificationLogs", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([notificationType])
  @@index([sentAt])
  @@index([success])
}

enum Role {
  ADMIN
  OWNER
  RETAILER
  ROASTER
  BARISTA
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
  LOCKED
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
}

enum CoffeeGrade {
  SPECIALTY
  PREMIUM
  RARITY
}

enum OrderStatus {
  PENDING
  CONFIRMED
  ROASTED
  DISPATCHED
  DELIVERED
  CANCELLED
}
